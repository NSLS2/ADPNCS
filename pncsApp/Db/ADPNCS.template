# Author: 

##################################################################
# Define all of your PV records here in the following form:
#
# record(RECORD_TYPE, "$(P)$(R)PVName"){
#   field(DTYP, "data type")
#   field(INP/OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))PV_NAME")
#   field(VAL, "value")
#   field(SCAN, "I/O Intr")
# }
#
# Consult other .template files for guides on how to write specific PVs
#
# The PV_NAME at the end of the INP or OUT field of the record is the 
# PVString defined in ADPNDetectorCXC.h.
#
# example: #define ADPNDetectorCXC "PV_NAME"
#
##################################################################


record(bo, "$(P)$(R)PowerState") {
    field(DESC, "Power State")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_POWER_STATE")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, "0")
    field(PINI, "NO")
}

record(bi, "$(P)$(R)PowerState_RBV") {
    field(DESC, "Power State Readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_POWER_STATE")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)VoltageState") {
    field(DESC, "Voltage State")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_VOLTAGE_STATE")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, "0")
    field(PINI, "NO")
}

record(bi, "$(P)$(R)VoltageState_RBV") {
    field(DESC, "Voltage State Readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_VOLTAGE_STATE")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)CoolDown") {
    field(DESC, "Cooling State")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_COOLING_STATE")
    field(ZNAM, "Off")
    field(ONAM, "Cool")
    field(VAL, "0")
    field(PINI, "NO")
}


record(bo, "$(P)$(R)WarmUp") {
    field(DESC, "Heating State")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_HEATING_STATE")
    field(ZNAM, "Off")
    field(ONAM, "Warm")
    field(VAL, "0")
    field(PINI, "NO")
}

record(bo, "$(P)$(R)BeamBlankState") {
    field(DESC, "Beam Blank State")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_BEAM_BLANK_STATE")
    field(ZNAM, "Unblanked")
    field(ONAM, "Blanked")
    field(VAL, "0")
    field(PINI, "NO")
}

record(bo, "$(P)$(R)Calibrate"){
    field(DESC, "Calibrate")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_CALIBRATE")
    field(ZNAM, "Idle")
    field(ONAM, "Calibrate")
    field(VAL, "0")
    field(PINI, "NO")
}

record(mbbi, "$(P)$(R)CameraMode_RBV"){
    field(DESC, "Camera Mode")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_CAMERA_MODE")
    field(ZRST, "Spectroscopy")
    field(ONST, "Imaging")
    field(TWST, "Anti-Blooming")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)TemperatureSetpoint"){
    field(DESC, "Temperature Setpoint")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_TEMPERATURE_SETPOINT")
    field(EGU, "C")
    field(VAL, "0")
    field(PINI, "NO")
}

record(ai, "$(P)$(R)Temperature_RBV"){
    field(DESC, "Temp Readback")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_TEMPERATURE")
    field(EGU, "C")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)HeatsinkTemperature_RBV"){
    field(DESC, "Heatsink Temp Readback")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_HEATSINK_TEMPERATURE")
    field(EGU, "C")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)CommonModeCorrection") {
    field(DESC, "Common Mode Correction")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_COMMON_MODE_CORRECTION")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, "1")
    field(PINI, "NO")
}

record(bi, "$(P)$(R)CommonModeCorrection_RBV") {
    field(DESC, "Common Mode Correction Readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_COMMON_MODE_CORRECTION")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)DynamicCalibration"){
    field(DESC, "Dynamic Calibration")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_DYNAMIC_CALIBRATION")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, "0")
    field(PINI, "NO")
}

record(bi, "$(P)$(R)DynamicCalibration_RBV"){
    field(DESC, "Dynamic Calibration Readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_DYNAMIC_CALIBRATION")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)PrimaryThreshold"){
    field(DESC, "Primary Threshold")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_PRIMARY_THRESHOLD")
    field(EGU, "keV")
    field(VAL, "0.0")
    field(PINI, "NO")
}

record(ai, "$(P)$(R)PrimaryThreshold_RBV"){
    field(DESC, "Primary Threshold Readback")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_PRIMARY_THRESHOLD")
    field(EGU, "keV")
    field(VAL, "0.0")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)SecondaryThreshold"){
    field(DESC, "Secondary Threshold")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_SECONDARY_THRESHOLD")
    field(EGU, "keV")
    field(VAL, "0.0")
    field(PINI, "NO")
}


record(ai, "$(P)$(R)SecondaryThreshold_RBV"){
    field(DESC, "Secondary Threshold Readback")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_SECONDARY_THRESHOLD")
    field(EGU, "keV")
    field(VAL, "0.0")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)LiveRunningCorrection"){
    field(DESC, "Live Running Correction")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_LIVE_RUNNING_CORRECTION")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, "0")
    field(PINI, "NO")
}

record(bi, "$(P)$(R)LiveRunningCorrection_RBV"){
    field(DESC, "Live Running Correction Readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_LIVE_RUNNING_CORRECTION")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(SCAN, "I/O Intr")
}

# record(bo "$(P)$(R)GainSource"){
#     field(DESC, "Gain Source")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_GAIN_SOURCE")
#     field(ZNAM, "User")
#     field(ONAM, "Factory")
#     field(VAL, "0")
#     field(PINI, "NO")
# }

# record(bi, "$(P)$(R)GainSource_RBV"){
#     field(DESC, "Gain Source Readback")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_GAIN_SOURCE")
#     field(ZNAM, "User")
#     field(ONAM, "Factory")
#     field(SCAN, "I/O Intr")
# }

record(stringin, "$(P)$(R)State_RBV"){
    field(DESC, "State Readback")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_STATE")
    field(VAL, "Unknown")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)ConnectionStatus_RBV"){
    field(DESC, "Connection Status Readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CXC_CONNECTION_STATUS")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}